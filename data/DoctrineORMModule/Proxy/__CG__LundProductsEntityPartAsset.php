<?php

namespace DoctrineORMModule\Proxy\__CG__\LundProducts\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class PartAsset extends \LundProducts\Entity\PartAsset implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'amazonName', 'picType', 'partAssetId', 'part', 'asset', 'assetSeq', 'assetType', 'videoType');
        }

        return array('__isInitialized__', 'amazonName', 'picType', 'partAssetId', 'part', 'asset', 'assetSeq', 'assetType', 'videoType');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (PartAsset $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setAmazonName($amazonName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAmazonName', array($amazonName));

        return parent::setAmazonName($amazonName);
    }

    /**
     * {@inheritDoc}
     */
    public function getAmazonName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAmazonName', array());

        return parent::getAmazonName();
    }

    /**
     * {@inheritDoc}
     */
    public function setAssetSeq($assetSeq)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAssetSeq', array($assetSeq));

        return parent::setAssetSeq($assetSeq);
    }

    /**
     * {@inheritDoc}
     */
    public function getAssetSeq()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAssetSeq', array());

        return parent::getAssetSeq();
    }

    /**
     * {@inheritDoc}
     */
    public function setPicType($picType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPicType', array($picType));

        return parent::setPicType($picType);
    }

    /**
     * {@inheritDoc}
     */
    public function getPicType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPicType', array());

        return parent::getPicType();
    }

    /**
     * {@inheritDoc}
     */
    public function getPartAssetId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getPartAssetId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPartAssetId', array());

        return parent::getPartAssetId();
    }

    /**
     * {@inheritDoc}
     */
    public function setPart(\LundProducts\Entity\Parts $part = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPart', array($part));

        return parent::setPart($part);
    }

    /**
     * {@inheritDoc}
     */
    public function getPart()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPart', array());

        return parent::getPart();
    }

    /**
     * {@inheritDoc}
     */
    public function setAsset(\RocketDam\Entity\Asset $asset = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAsset', array($asset));

        return parent::setAsset($asset);
    }

    /**
     * {@inheritDoc}
     */
    public function getAsset()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAsset', array());

        return parent::getAsset();
    }

    /**
     * {@inheritDoc}
     */
    public function setAssetType($assetType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAssetType', array($assetType));

        return parent::setAssetType($assetType);
    }

    /**
     * {@inheritDoc}
     */
    public function getAssetType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAssetType', array());

        return parent::getAssetType();
    }

    /**
     * {@inheritDoc}
     */
    public function setVideoType($videoType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVideoType', array($videoType));

        return parent::setVideoType($videoType);
    }

    /**
     * {@inheritDoc}
     */
    public function getVideoType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVideoType', array());

        return parent::getVideoType();
    }

}
